environment:
  matrix:
  # - julia_version: 0.7
  - julia_version: 1
  # - julia_version: nightly

platform:
  - x86 # 32-bit
  - x64 # 64-bit

# # Uncomment the following lines to allow failures on nightly julia
# # (tests will run but not make your overall status red)
# matrix:
#   allow_failures:
#   - julia_version: nightly

branches:
  only:
    - master
    #- /release-.*/

notifications:
  - provider: Email
    on_build_success: false
    on_build_failure: false
    on_build_status_changed: false

install:
  - ps: iex ((new-object net.webclient).DownloadString("https://raw.githubusercontent.com/JuliaCI/Appveyor.jl/version-1/bin/install.ps1"))

build_script:
  - echo "%JL_BUILD_SCRIPT%"
  - C:\julia\bin\julia -e "%JL_BUILD_SCRIPT%"

test_script:
  - echo "%JL_TEST_SCRIPT%"
  - C:\julia\bin\julia -e "%JL_TEST_SCRIPT%"

# # Uncomment to support code coverage upload. Should only be enabled for packages
# # which would have coverage gaps without running on Windows
# on_success:
#   - echo "%JL_CODECOV_SCRIPT%"
#   - C:\julia\bin\julia -e "%JL_CODECOV_SCRIPT%"




# environment:
#   matrix:
#   - JULIA_URL: "https://julialang-s3.julialang.org/bin/winnt/x64/0.6/julia-0.6-latest-win64.exe"
#   - JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x64/julia-latest-win64.exe"
# #- JULIA_URL: "https://julialang-s3.julialang.org/bin/winnt/x86/0.6/julia-0.6-latest-win32.exe"
# #- JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x86/julia-latest-win32.exe"
#
# ## uncomment the following lines to allow failures on nightly julia
# ## (tests will run but not make your overall status red)
# #matrix:
# #  allow_failures:
# #  - JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x86/julia-latest-win32.exe"
# #  - JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x64/julia-latest-win64.exe"
#
# branches:
#   only:
#     - master
#     - /release-.*/
#
# notifications:
#   - provider: Email
#     on_build_success: false
#     on_build_failure: false
#     on_build_status_changed: false
#
# install:
#   - ps: "[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12"
# # If there's a newer build queued for the same PR, cancel this one
#   - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
#         https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
#         Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
#         throw "There are newer queued builds for this pull request, failing early." }
# # Download most recent Julia Windows binary
#   - ps: (new-object net.webclient).DownloadFile(
#         $env:JULIA_URL,
#         "C:\projects\julia-binary.exe")
# # Run installer silently, output to C:\projects\julia
#   - C:\projects\julia-binary.exe /S /D=C:\projects\julia
#
# build_script:
# # Need to convert from shallow to complete for Pkg.clone to work
#   - IF EXIST .git\shallow (git fetch --unshallow)
#   - C:\projects\julia\bin\julia -e "versioninfo();
#       Pkg.clone(pwd(), \"HDF5Logger\"); Pkg.build(\"HDF5Logger\")"
#
# test_script:
#   - C:\projects\julia\bin\julia -e "Pkg.test(\"HDF5Logger\")"
